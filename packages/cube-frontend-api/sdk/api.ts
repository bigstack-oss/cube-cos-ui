/* tslint:disable */
/* eslint-disable */
/**
 * Cube COS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetAbstractedEventsResponse
 */
export interface GetAbstractedEventsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetAbstractedEventsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetAbstractedEventsResponseData}
     * @memberof GetAbstractedEventsResponse
     */
    'data': GetAbstractedEventsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetAbstractedEventsResponseData
 */
export interface GetAbstractedEventsResponseData {
    /**
     * 
     * @type {Array<GetAbstractedEventsResponseDataEventsInner>}
     * @memberof GetAbstractedEventsResponseData
     */
    'events': Array<GetAbstractedEventsResponseDataEventsInner>;
    /**
     * 
     * @type {GetAbstractedEventsResponseDataLimit}
     * @memberof GetAbstractedEventsResponseData
     */
    'limit': GetAbstractedEventsResponseDataLimit;
}
/**
 * 
 * @export
 * @interface GetAbstractedEventsResponseDataEventsInner
 */
export interface GetAbstractedEventsResponseDataEventsInner {
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'severity': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'service': string;
    /**
     * 
     * @type {GetAbstractedEventsResponseDataEventsInnerMetadata}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'metadata': GetAbstractedEventsResponseDataEventsInnerMetadata;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInner
     */
    'time': string;
}
/**
 * 
 * @export
 * @interface GetAbstractedEventsResponseDataEventsInnerMetadata
 */
export interface GetAbstractedEventsResponseDataEventsInnerMetadata {
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInnerMetadata
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataEventsInnerMetadata
     */
    'ip'?: string;
}
/**
 * 
 * @export
 * @interface GetAbstractedEventsResponseDataLimit
 */
export interface GetAbstractedEventsResponseDataLimit {
    /**
     * 
     * @type {number}
     * @memberof GetAbstractedEventsResponseDataLimit
     */
    'number': number;
    /**
     * 
     * @type {string}
     * @memberof GetAbstractedEventsResponseDataLimit
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface GetCpuUsageRankOfHostsResponse
 */
export interface GetCpuUsageRankOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCpuUsageRankOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInner>}
     * @memberof GetCpuUsageRankOfHostsResponse
     */
    'data': Array<GetCpuUsageRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetCpuUsageRankOfHostsResponseDataInner
 */
export interface GetCpuUsageRankOfHostsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfHostsResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfHostsResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof GetCpuUsageRankOfHostsResponseDataInner
     */
    'usedPercent': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInnerHistoryInner>}
     * @memberof GetCpuUsageRankOfHostsResponseDataInner
     */
    'history': Array<GetCpuUsageRankOfHostsResponseDataInnerHistoryInner>;
}
/**
 * 
 * @export
 * @interface GetCpuUsageRankOfHostsResponseDataInnerHistoryInner
 */
export interface GetCpuUsageRankOfHostsResponseDataInnerHistoryInner {
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfHostsResponseDataInnerHistoryInner
     */
    'time': string;
    /**
     * 
     * @type {number}
     * @memberof GetCpuUsageRankOfHostsResponseDataInnerHistoryInner
     */
    'usedPercent': number;
}
/**
 * 
 * @export
 * @interface GetCpuUsageRankOfVmsResponse
 */
export interface GetCpuUsageRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCpuUsageRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInner>}
     * @memberof GetCpuUsageRankOfVmsResponse
     */
    'data': Array<GetCpuUsageRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetCpuUsageSummaryOfHostsResponse
 */
export interface GetCpuUsageSummaryOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCpuUsageSummaryOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsageCpu}
     * @memberof GetCpuUsageSummaryOfHostsResponse
     */
    'data': GetMetricsResponseDataHostUsagesInnerUsageCpu;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageSummaryOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetCpuUsageSummaryOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDataCenters500Response
 */
export interface GetDataCenters500Response {
    /**
     * 
     * @type {number}
     * @memberof GetDataCenters500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetDataCenters500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDataCenters500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetDataCentersResponse
 */
export interface GetDataCentersResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDataCentersResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetDataCentersResponseDataInner>}
     * @memberof GetDataCentersResponse
     */
    'data': Array<GetDataCentersResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDataCentersResponseDataInner
 */
export interface GetDataCentersResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponseDataInner
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponseDataInner
     */
    'virtualIp': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetDataCentersResponseDataInner
     */
    'isHaEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetDataCentersResponseDataInner
     */
    'isLocal': boolean;
    /**
     * 
     * @type {GetDataCentersResponseDataInnerAdditional}
     * @memberof GetDataCentersResponseDataInner
     */
    'additional': GetDataCentersResponseDataInnerAdditional;
}
/**
 * 
 * @export
 * @interface GetDataCentersResponseDataInnerAdditional
 */
export interface GetDataCentersResponseDataInnerAdditional {
    /**
     * 
     * @type {string}
     * @memberof GetDataCentersResponseDataInnerAdditional
     */
    'helpUrl'?: string;
}
/**
 * 
 * @export
 * @interface GetDiskBandwidthHistoryOfHostsResponse
 */
export interface GetDiskBandwidthHistoryOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskBandwidthHistoryOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetDiskBandwidthHistoryOfHostsResponseData}
     * @memberof GetDiskBandwidthHistoryOfHostsResponse
     */
    'data': GetDiskBandwidthHistoryOfHostsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetDiskBandwidthHistoryOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskBandwidthHistoryOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDiskBandwidthHistoryOfHostsResponseData
 */
export interface GetDiskBandwidthHistoryOfHostsResponseData {
    /**
     * 
     * @type {Array<GetDiskBandwidthHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskBandwidthHistoryOfHostsResponseData
     */
    'read': Array<GetDiskBandwidthHistoryOfHostsResponseDataReadInner>;
    /**
     * 
     * @type {Array<GetDiskBandwidthHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskBandwidthHistoryOfHostsResponseData
     */
    'write': Array<GetDiskBandwidthHistoryOfHostsResponseDataReadInner>;
}
/**
 * 
 * @export
 * @interface GetDiskBandwidthHistoryOfHostsResponseDataReadInner
 */
export interface GetDiskBandwidthHistoryOfHostsResponseDataReadInner {
    /**
     * 
     * @type {string}
     * @memberof GetDiskBandwidthHistoryOfHostsResponseDataReadInner
     */
    'time': string;
    /**
     * 
     * @type {number}
     * @memberof GetDiskBandwidthHistoryOfHostsResponseDataReadInner
     */
    'bytes': number;
}
/**
 * 
 * @export
 * @interface GetDiskIopsHistoryOfHostsResponse
 */
export interface GetDiskIopsHistoryOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskIopsHistoryOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetDiskIopsHistoryOfHostsResponseData}
     * @memberof GetDiskIopsHistoryOfHostsResponse
     */
    'data': GetDiskIopsHistoryOfHostsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetDiskIopsHistoryOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskIopsHistoryOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDiskIopsHistoryOfHostsResponseData
 */
export interface GetDiskIopsHistoryOfHostsResponseData {
    /**
     * 
     * @type {Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskIopsHistoryOfHostsResponseData
     */
    'read': Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>;
    /**
     * 
     * @type {Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskIopsHistoryOfHostsResponseData
     */
    'write': Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>;
}
/**
 * 
 * @export
 * @interface GetDiskIopsHistoryOfHostsResponseDataReadInner
 */
export interface GetDiskIopsHistoryOfHostsResponseDataReadInner {
    /**
     * 
     * @type {string}
     * @memberof GetDiskIopsHistoryOfHostsResponseDataReadInner
     */
    'time': string;
    /**
     * 
     * @type {number}
     * @memberof GetDiskIopsHistoryOfHostsResponseDataReadInner
     */
    'ops': number;
}
/**
 * 
 * @export
 * @interface GetDiskLatencyHistoryOfHostsResponse
 */
export interface GetDiskLatencyHistoryOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskLatencyHistoryOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetDiskLatencyHistoryOfHostsResponseData}
     * @memberof GetDiskLatencyHistoryOfHostsResponse
     */
    'data': GetDiskLatencyHistoryOfHostsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetDiskLatencyHistoryOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskLatencyHistoryOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDiskLatencyHistoryOfHostsResponseData
 */
export interface GetDiskLatencyHistoryOfHostsResponseData {
    /**
     * 
     * @type {Array<GetDiskLatencyHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskLatencyHistoryOfHostsResponseData
     */
    'read': Array<GetDiskLatencyHistoryOfHostsResponseDataReadInner>;
    /**
     * 
     * @type {Array<GetDiskLatencyHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskLatencyHistoryOfHostsResponseData
     */
    'write': Array<GetDiskLatencyHistoryOfHostsResponseDataReadInner>;
}
/**
 * 
 * @export
 * @interface GetDiskLatencyHistoryOfHostsResponseDataReadInner
 */
export interface GetDiskLatencyHistoryOfHostsResponseDataReadInner {
    /**
     * 
     * @type {string}
     * @memberof GetDiskLatencyHistoryOfHostsResponseDataReadInner
     */
    'time': string;
    /**
     * 
     * @type {number}
     * @memberof GetDiskLatencyHistoryOfHostsResponseDataReadInner
     */
    'millisecond': number;
}
/**
 * 
 * @export
 * @interface GetDiskReadIopsRankOfVmsResponse
 */
export interface GetDiskReadIopsRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskReadIopsRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetDiskReadIopsRankOfVmsResponseDataInner>}
     * @memberof GetDiskReadIopsRankOfVmsResponse
     */
    'data': Array<GetDiskReadIopsRankOfVmsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetDiskReadIopsRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskReadIopsRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDiskReadIopsRankOfVmsResponseDataInner
 */
export interface GetDiskReadIopsRankOfVmsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetDiskReadIopsRankOfVmsResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskReadIopsRankOfVmsResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskReadIopsRankOfVmsResponseDataInner
     */
    'device': string;
    /**
     * 
     * @type {number}
     * @memberof GetDiskReadIopsRankOfVmsResponseDataInner
     */
    'ops': number;
    /**
     * 
     * @type {Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>}
     * @memberof GetDiskReadIopsRankOfVmsResponseDataInner
     */
    'history': Array<GetDiskIopsHistoryOfHostsResponseDataReadInner>;
}
/**
 * 
 * @export
 * @interface GetDiskUsageRankOfHostsResponse
 */
export interface GetDiskUsageRankOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskUsageRankOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInner>}
     * @memberof GetDiskUsageRankOfHostsResponse
     */
    'data': Array<GetCpuUsageRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetDiskUsageRankOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskUsageRankOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetDiskWriteIopsRankOfVmsResponse
 */
export interface GetDiskWriteIopsRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetDiskWriteIopsRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetDiskReadIopsRankOfVmsResponseDataInner>}
     * @memberof GetDiskWriteIopsRankOfVmsResponse
     */
    'data': Array<GetDiskReadIopsRankOfVmsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetDiskWriteIopsRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDiskWriteIopsRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetEvents400Response
 */
export interface GetEvents400Response {
    /**
     * 
     * @type {number}
     * @memberof GetEvents400Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetEvents400Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEvents400Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetEvents500Response
 */
export interface GetEvents500Response {
    /**
     * 
     * @type {number}
     * @memberof GetEvents500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetEvents500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEvents500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetEventsResponse
 */
export interface GetEventsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetEventsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetEventsResponseData}
     * @memberof GetEventsResponse
     */
    'data': GetEventsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetEventsResponseData
 */
export interface GetEventsResponseData {
    /**
     * 
     * @type {Array<GetEventsResponseDataEventsInner>}
     * @memberof GetEventsResponseData
     */
    'events': Array<GetEventsResponseDataEventsInner>;
    /**
     * 
     * @type {GetEventsResponseDataPage}
     * @memberof GetEventsResponseData
     */
    'page': GetEventsResponseDataPage;
}
/**
 * 
 * @export
 * @interface GetEventsResponseDataEventsInner
 */
export interface GetEventsResponseDataEventsInner {
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'severity': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'service': string;
    /**
     * 
     * @type {GetEventsResponseDataEventsInnerMetadata}
     * @memberof GetEventsResponseDataEventsInner
     */
    'metadata': GetEventsResponseDataEventsInnerMetadata;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInner
     */
    'time': string;
}
/**
 * 
 * @export
 * @interface GetEventsResponseDataEventsInnerMetadata
 */
export interface GetEventsResponseDataEventsInnerMetadata {
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInnerMetadata
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsResponseDataEventsInnerMetadata
     */
    'ip': string;
}
/**
 * 
 * @export
 * @interface GetEventsResponseDataPage
 */
export interface GetEventsResponseDataPage {
    /**
     * 
     * @type {number}
     * @memberof GetEventsResponseDataPage
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetEventsResponseDataPage
     */
    'number': number;
    /**
     * 
     * @type {number}
     * @memberof GetEventsResponseDataPage
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface GetHealthHistory500Response
 */
export interface GetHealthHistory500Response {
    /**
     * 
     * @type {number}
     * @memberof GetHealthHistory500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHealthHistory500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHealthHistory500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetHealths500Response
 */
export interface GetHealths500Response {
    /**
     * 
     * @type {number}
     * @memberof GetHealths500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetHealths500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHealths500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetHealthsResponse
 */
export interface GetHealthsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetHealthsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetHealthsResponseData}
     * @memberof GetHealthsResponse
     */
    'data': GetHealthsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseData
 */
export interface GetHealthsResponseData {
    /**
     * 
     * @type {GetHealthsResponseDataOverall}
     * @memberof GetHealthsResponseData
     */
    'overall': GetHealthsResponseDataOverall;
    /**
     * 
     * @type {Array<GetHealthsResponseDataServicesInner>}
     * @memberof GetHealthsResponseData
     */
    'services': Array<GetHealthsResponseDataServicesInner>;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseDataOverall
 */
export interface GetHealthsResponseDataOverall {
    /**
     * 
     * @type {GetHealthsResponseDataOverallStatus}
     * @memberof GetHealthsResponseDataOverall
     */
    'status': GetHealthsResponseDataOverallStatus;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseDataOverallStatus
 */
export interface GetHealthsResponseDataOverallStatus {
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataOverallStatus
     */
    'current': string;
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataOverallStatus
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseDataServicesInner
 */
export interface GetHealthsResponseDataServicesInner {
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataServicesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataServicesInner
     */
    'category': string;
    /**
     * 
     * @type {GetHealthsResponseDataServicesInnerStatus}
     * @memberof GetHealthsResponseDataServicesInner
     */
    'status': GetHealthsResponseDataServicesInnerStatus;
    /**
     * 
     * @type {Array<GetHealthsResponseDataServicesInnerModulesInner>}
     * @memberof GetHealthsResponseDataServicesInner
     */
    'modules': Array<GetHealthsResponseDataServicesInnerModulesInner>;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseDataServicesInnerModulesInner
 */
export interface GetHealthsResponseDataServicesInnerModulesInner {
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataServicesInnerModulesInner
     */
    'name': string;
    /**
     * 
     * @type {GetHealthsResponseDataServicesInnerStatus}
     * @memberof GetHealthsResponseDataServicesInnerModulesInner
     */
    'status': GetHealthsResponseDataServicesInnerStatus;
}
/**
 * 
 * @export
 * @interface GetHealthsResponseDataServicesInnerStatus
 */
export interface GetHealthsResponseDataServicesInnerStatus {
    /**
     * 
     * @type {string}
     * @memberof GetHealthsResponseDataServicesInnerStatus
     */
    'current': string;
}
/**
 * 
 * @export
 * @interface GetIntegrations500Response
 */
export interface GetIntegrations500Response {
    /**
     * 
     * @type {number}
     * @memberof GetIntegrations500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrations500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrations500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetIntegrationsResponse
 */
export interface GetIntegrationsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetIntegrationsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetIntegrationsResponseDataInner>}
     * @memberof GetIntegrationsResponse
     */
    'data': Array<GetIntegrationsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrationsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrationsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetIntegrationsResponseDataInner
 */
export interface GetIntegrationsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetIntegrationsResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetIntegrationsResponseDataInner
     */
    'isHeaderShortcutEnabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrationsResponseDataInner
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetIntegrationsResponseDataInner
     */
    'isBuiltIn': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetIntegrationsResponseDataInner
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GetLicenses500Response
 */
export interface GetLicenses500Response {
    /**
     * 
     * @type {number}
     * @memberof GetLicenses500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLicenses500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLicenses500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetLicensesResponse
 */
export interface GetLicensesResponse {
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponse
     */
    'code': number;
    /**
     * 
     * @type {GetLicensesResponseData}
     * @memberof GetLicensesResponse
     */
    'data': GetLicensesResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseData
 */
export interface GetLicensesResponseData {
    /**
     * 
     * @type {Array<GetLicensesResponseDataLicensesInner>}
     * @memberof GetLicensesResponseData
     */
    'licenses'?: Array<GetLicensesResponseDataLicensesInner>;
    /**
     * 
     * @type {GetLicensesResponseDataPage}
     * @memberof GetLicensesResponseData
     */
    'page'?: GetLicensesResponseDataPage;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInner
 */
export interface GetLicensesResponseDataLicensesInner {
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'hostname': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'serial': string;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerProduct}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'product': GetLicensesResponseDataLicensesInnerProduct;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerIssue}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'issue': GetLicensesResponseDataLicensesInnerIssue;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerQuantity}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'quantity': GetLicensesResponseDataLicensesInnerQuantity;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerServiceLevelAgreement}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'serviceLevelAgreement': GetLicensesResponseDataLicensesInnerServiceLevelAgreement;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerExpiry}
     * @memberof GetLicensesResponseDataLicensesInner
     */
    'expiry': GetLicensesResponseDataLicensesInnerExpiry;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInnerExpiry
 */
export interface GetLicensesResponseDataLicensesInnerExpiry {
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerExpiry
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataLicensesInnerExpiry
     */
    'days': number;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInnerIssue
 */
export interface GetLicensesResponseDataLicensesInnerIssue {
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerIssue
     */
    'by': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerIssue
     */
    'to': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerIssue
     */
    'hardware': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerIssue
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInnerProduct
 */
export interface GetLicensesResponseDataLicensesInnerProduct {
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerProduct
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof GetLicensesResponseDataLicensesInnerProduct
     */
    'features': object;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInnerQuantity
 */
export interface GetLicensesResponseDataLicensesInnerQuantity {
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerQuantity
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataLicensesInnerQuantity
     */
    'vcpu': number;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataLicensesInnerServiceLevelAgreement
 */
export interface GetLicensesResponseDataLicensesInnerServiceLevelAgreement {
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataLicensesInnerServiceLevelAgreement
     */
    'uptime': number;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerServiceLevelAgreement
     */
    'period': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerServiceLevelAgreement
     */
    'meanTimeBetweenFailure': string;
    /**
     * 
     * @type {string}
     * @memberof GetLicensesResponseDataLicensesInnerServiceLevelAgreement
     */
    'meanTimeToRecovery': string;
}
/**
 * 
 * @export
 * @interface GetLicensesResponseDataPage
 */
export interface GetLicensesResponseDataPage {
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataPage
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataPage
     */
    'number': number;
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponseDataPage
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface GetMe500Response
 */
export interface GetMe500Response {
    /**
     * 
     * @type {number}
     * @memberof GetMe500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMe500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMe500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetMeResponse
 */
export interface GetMeResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMeResponse
     */
    'code': number;
    /**
     * 
     * @type {GetMeResponseData}
     * @memberof GetMeResponse
     */
    'data': GetMeResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetMeResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMeResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetMeResponseData
 */
export interface GetMeResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetMeResponseData
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetMemoryUsageRankOfHostsResponse
 */
export interface GetMemoryUsageRankOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMemoryUsageRankOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInner>}
     * @memberof GetMemoryUsageRankOfHostsResponse
     */
    'data': Array<GetCpuUsageRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageRankOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageRankOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetMemoryUsageRankOfVmsResponse
 */
export interface GetMemoryUsageRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMemoryUsageRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetCpuUsageRankOfHostsResponseDataInner>}
     * @memberof GetMemoryUsageRankOfVmsResponse
     */
    'data': Array<GetCpuUsageRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetMemoryUsageSummaryOfHostsResponse
 */
export interface GetMemoryUsageSummaryOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMemoryUsageSummaryOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsageMemory}
     * @memberof GetMemoryUsageSummaryOfHostsResponse
     */
    'data': GetMetricsResponseDataHostUsagesInnerUsageMemory;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageSummaryOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageSummaryOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetMemoryUsageSummaryOfVmsResponse
 */
export interface GetMemoryUsageSummaryOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMemoryUsageSummaryOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsageMemory}
     * @memberof GetMemoryUsageSummaryOfVmsResponse
     */
    'data': GetMetricsResponseDataHostUsagesInnerUsageMemory;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageSummaryOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMemoryUsageSummaryOfVmsResponse
     */
    'status': string;
}
/**
 * @type GetMetricByTypes200Response
 * @export
 */
export type GetMetricByTypes200Response = GetCpuUsageRankOfHostsResponse | GetCpuUsageRankOfVmsResponse | GetCpuUsageSummaryOfHostsResponse | GetDiskBandwidthHistoryOfHostsResponse | GetDiskIopsHistoryOfHostsResponse | GetDiskLatencyHistoryOfHostsResponse | GetDiskReadIopsRankOfVmsResponse | GetDiskUsageRankOfHostsResponse | GetDiskWriteIopsRankOfVmsResponse | GetMemoryUsageRankOfHostsResponse | GetMemoryUsageRankOfVmsResponse | GetMemoryUsageSummaryOfHostsResponse | GetMemoryUsageSummaryOfVmsResponse | GetNetworkTrafficInRankOfHostsResponse | GetNetworkTrafficInRankOfVmsResponse | GetNetworkTrafficOutRankOfHostsResponse | GetNetworkTrafficOutRankOfVmsResponse;

/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseData
 */
export interface GetMetricByTypes200ResponseData {
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataVm}
     * @memberof GetMetricByTypes200ResponseData
     */
    'vm'?: GetMetricByTypes200ResponseDataVm;
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataRole}
     * @memberof GetMetricByTypes200ResponseData
     */
    'role'?: GetMetricByTypes200ResponseDataRole;
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataMetrics}
     * @memberof GetMetricByTypes200ResponseData
     */
    'metrics'?: GetMetricByTypes200ResponseDataMetrics;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataMetrics
 */
export interface GetMetricByTypes200ResponseDataMetrics {
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataMetricsVcpu}
     * @memberof GetMetricByTypes200ResponseDataMetrics
     */
    'vcpu'?: GetMetricByTypes200ResponseDataMetricsVcpu;
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataMetricsMemory}
     * @memberof GetMetricByTypes200ResponseDataMetrics
     */
    'memory'?: GetMetricByTypes200ResponseDataMetricsMemory;
    /**
     * 
     * @type {GetMetricByTypes200ResponseDataMetricsStorage}
     * @memberof GetMetricByTypes200ResponseDataMetrics
     */
    'storage'?: GetMetricByTypes200ResponseDataMetricsStorage;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataMetricsMemory
 */
export interface GetMetricByTypes200ResponseDataMetricsMemory {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsMemory
     */
    'totalMiB'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsMemory
     */
    'usedMiB'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsMemory
     */
    'freeMiB'?: number;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataMetricsStorage
 */
export interface GetMetricByTypes200ResponseDataMetricsStorage {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsStorage
     */
    'totalMiB'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsStorage
     */
    'usedMiB'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsStorage
     */
    'freeMiB'?: number;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataMetricsVcpu
 */
export interface GetMetricByTypes200ResponseDataMetricsVcpu {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsVcpu
     */
    'totalCores'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsVcpu
     */
    'usedCores'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataMetricsVcpu
     */
    'freeCores'?: number;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataRole
 */
export interface GetMetricByTypes200ResponseDataRole {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataRole
     */
    'controlConverged'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataRole
     */
    'control'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataRole
     */
    'compute'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataRole
     */
    'storage'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataRole
     */
    'others'?: number;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes200ResponseDataVm
 */
export interface GetMetricByTypes200ResponseDataVm {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'running'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'stopped'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'paused'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'suspend'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'error'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes200ResponseDataVm
     */
    'unknown'?: number;
}
/**
 * 
 * @export
 * @interface GetMetricByTypes400Response
 */
export interface GetMetricByTypes400Response {
    /**
     * 
     * @type {number}
     * @memberof GetMetricByTypes400Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMetricByTypes400Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMetricByTypes400Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetMetricsOverview500Response
 */
export interface GetMetricsOverview500Response {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsOverview500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsOverview500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsOverview500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetMetricsResponse
 */
export interface GetMetricsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponse
     */
    'code': number;
    /**
     * 
     * @type {GetMetricsResponseData}
     * @memberof GetMetricsResponse
     */
    'data': GetMetricsResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseData
 */
export interface GetMetricsResponseData {
    /**
     * 
     * @type {GetMetricsResponseDataDataCenter}
     * @memberof GetMetricsResponseData
     */
    'dataCenter': GetMetricsResponseDataDataCenter;
    /**
     * 
     * @type {GetMetricsResponseDataHost}
     * @memberof GetMetricsResponseData
     */
    'host': GetMetricsResponseDataHost;
    /**
     * 
     * @type {GetMetricsResponseDataVm}
     * @memberof GetMetricsResponseData
     */
    'vm': GetMetricsResponseDataVm;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataDataCenter
 */
export interface GetMetricsResponseDataDataCenter {
    /**
     * 
     * @type {GetMetricsResponseDataDataCenterUsage}
     * @memberof GetMetricsResponseDataDataCenter
     */
    'usage': GetMetricsResponseDataDataCenterUsage;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataDataCenterUsage
 */
export interface GetMetricsResponseDataDataCenterUsage {
    /**
     * 
     * @type {GetMetricsResponseDataDataCenterUsageCpu}
     * @memberof GetMetricsResponseDataDataCenterUsage
     */
    'cpu': GetMetricsResponseDataDataCenterUsageCpu;
    /**
     * 
     * @type {GetMetricsResponseDataDataCenterUsageMemory}
     * @memberof GetMetricsResponseDataDataCenterUsage
     */
    'memory': GetMetricsResponseDataDataCenterUsageMemory;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataDataCenterUsageCpu
 */
export interface GetMetricsResponseDataDataCenterUsageCpu {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageCpu
     */
    'totalCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageCpu
     */
    'usedCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageCpu
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageCpu
     */
    'freeCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageCpu
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataDataCenterUsageMemory
 */
export interface GetMetricsResponseDataDataCenterUsageMemory {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageMemory
     */
    'totalMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageMemory
     */
    'usedMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageMemory
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageMemory
     */
    'freeMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataDataCenterUsageMemory
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHost
 */
export interface GetMetricsResponseDataHost {
    /**
     * 
     * @type {GetMetricsResponseDataHostRole}
     * @memberof GetMetricsResponseDataHost
     */
    'role': GetMetricsResponseDataHostRole;
    /**
     * 
     * @type {Array<GetMetricsResponseDataHostUsagesInner>}
     * @memberof GetMetricsResponseDataHost
     */
    'usages': Array<GetMetricsResponseDataHostUsagesInner>;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHostRole
 */
export interface GetMetricsResponseDataHostRole {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostRole
     */
    'controlConverged': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostRole
     */
    'control': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostRole
     */
    'compute': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostRole
     */
    'storage': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostRole
     */
    'others': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHostUsagesInner
 */
export interface GetMetricsResponseDataHostUsagesInner {
    /**
     * 
     * @type {string}
     * @memberof GetMetricsResponseDataHostUsagesInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsResponseDataHostUsagesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetMetricsResponseDataHostUsagesInner
     */
    'address': string;
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsage}
     * @memberof GetMetricsResponseDataHostUsagesInner
     */
    'usage': GetMetricsResponseDataHostUsagesInnerUsage;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHostUsagesInnerUsage
 */
export interface GetMetricsResponseDataHostUsagesInnerUsage {
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsageCpu}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsage
     */
    'cpu': GetMetricsResponseDataHostUsagesInnerUsageCpu;
    /**
     * 
     * @type {GetMetricsResponseDataHostUsagesInnerUsageMemory}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsage
     */
    'memory': GetMetricsResponseDataHostUsagesInnerUsageMemory;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHostUsagesInnerUsageCpu
 */
export interface GetMetricsResponseDataHostUsagesInnerUsageCpu {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageCpu
     */
    'totalCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageCpu
     */
    'usedCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageCpu
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageCpu
     */
    'freeCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageCpu
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataHostUsagesInnerUsageMemory
 */
export interface GetMetricsResponseDataHostUsagesInnerUsageMemory {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageMemory
     */
    'totalMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageMemory
     */
    'usedMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageMemory
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageMemory
     */
    'freeMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataHostUsagesInnerUsageMemory
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVm
 */
export interface GetMetricsResponseDataVm {
    /**
     * 
     * @type {GetMetricsResponseDataVmStatus}
     * @memberof GetMetricsResponseDataVm
     */
    'status': GetMetricsResponseDataVmStatus;
    /**
     * 
     * @type {GetMetricsResponseDataVmUsage}
     * @memberof GetMetricsResponseDataVm
     */
    'usage': GetMetricsResponseDataVmUsage;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVmStatus
 */
export interface GetMetricsResponseDataVmStatus {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'running': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'stopped': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'paused': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'suspend': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'error': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmStatus
     */
    'unknown': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVmUsage
 */
export interface GetMetricsResponseDataVmUsage {
    /**
     * 
     * @type {GetMetricsResponseDataVmUsageVcpu}
     * @memberof GetMetricsResponseDataVmUsage
     */
    'vcpu': GetMetricsResponseDataVmUsageVcpu;
    /**
     * 
     * @type {GetMetricsResponseDataVmUsageMemory}
     * @memberof GetMetricsResponseDataVmUsage
     */
    'memory': GetMetricsResponseDataVmUsageMemory;
    /**
     * 
     * @type {GetMetricsResponseDataVmUsageStorage}
     * @memberof GetMetricsResponseDataVmUsage
     */
    'storage': GetMetricsResponseDataVmUsageStorage;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVmUsageMemory
 */
export interface GetMetricsResponseDataVmUsageMemory {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageMemory
     */
    'totalMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageMemory
     */
    'usedMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageMemory
     */
    'freeMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageMemory
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageMemory
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVmUsageStorage
 */
export interface GetMetricsResponseDataVmUsageStorage {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageStorage
     */
    'totalMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageStorage
     */
    'usedMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageStorage
     */
    'freeMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageStorage
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageStorage
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetMetricsResponseDataVmUsageVcpu
 */
export interface GetMetricsResponseDataVmUsageVcpu {
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageVcpu
     */
    'totalCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageVcpu
     */
    'usedCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageVcpu
     */
    'freeCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageVcpu
     */
    'usedPercent': number;
    /**
     * 
     * @type {number}
     * @memberof GetMetricsResponseDataVmUsageVcpu
     */
    'freePercent': number;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponse
 */
export interface GetModuleHealthHistoryResponse {
    /**
     * 
     * @type {number}
     * @memberof GetModuleHealthHistoryResponse
     */
    'code': number;
    /**
     * 
     * @type {GetModuleHealthHistoryResponseData}
     * @memberof GetModuleHealthHistoryResponse
     */
    'data': GetModuleHealthHistoryResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponseData
 */
export interface GetModuleHealthHistoryResponseData {
    /**
     * 
     * @type {GetModuleHealthHistoryResponseDataHealth}
     * @memberof GetModuleHealthHistoryResponseData
     */
    'health': GetModuleHealthHistoryResponseDataHealth;
    /**
     * 
     * @type {GetModuleHealthHistoryResponseDataPage}
     * @memberof GetModuleHealthHistoryResponseData
     */
    'page': GetModuleHealthHistoryResponseDataPage;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponseDataHealth
 */
export interface GetModuleHealthHistoryResponseDataHealth {
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealth
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealth
     */
    'service': string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealth
     */
    'module': string;
    /**
     * 
     * @type {Array<GetModuleHealthHistoryResponseDataHealthHistoryInner>}
     * @memberof GetModuleHealthHistoryResponseDataHealth
     */
    'history': Array<GetModuleHealthHistoryResponseDataHealthHistoryInner>;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponseDataHealthHistoryInner
 */
export interface GetModuleHealthHistoryResponseDataHealthHistoryInner {
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInner
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInner
     */
    'status': string;
    /**
     * 
     * @type {GetModuleHealthHistoryResponseDataHealthHistoryInnerError}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInner
     */
    'error'?: GetModuleHealthHistoryResponseDataHealthHistoryInnerError;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponseDataHealthHistoryInnerError
 */
export interface GetModuleHealthHistoryResponseDataHealthHistoryInnerError {
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInnerError
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInnerError
     */
    'nodes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInnerError
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInnerError
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetModuleHealthHistoryResponseDataHealthHistoryInnerError
     */
    'log'?: string;
}
/**
 * 
 * @export
 * @interface GetModuleHealthHistoryResponseDataPage
 */
export interface GetModuleHealthHistoryResponseDataPage {
    /**
     * 
     * @type {number}
     * @memberof GetModuleHealthHistoryResponseDataPage
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetModuleHealthHistoryResponseDataPage
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetModuleHealthHistoryResponseDataPage
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficInRankOfHostsResponse
 */
export interface GetNetworkTrafficInRankOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficInRankOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfHostsResponseDataInner>}
     * @memberof GetNetworkTrafficInRankOfHostsResponse
     */
    'data': Array<GetNetworkTrafficInRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficInRankOfHostsResponseDataInner
 */
export interface GetNetworkTrafficInRankOfHostsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInner
     */
    'packets': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner>}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInner
     */
    'history': Array<GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner>;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner
 */
export interface GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner {
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner
     */
    'time': string;
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner
     */
    'packets': number;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficInRankOfVmsResponse
 */
export interface GetNetworkTrafficInRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficInRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfVmsResponseDataInner>}
     * @memberof GetNetworkTrafficInRankOfVmsResponse
     */
    'data': Array<GetNetworkTrafficInRankOfVmsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficInRankOfVmsResponseDataInner
 */
export interface GetNetworkTrafficInRankOfVmsResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfVmsResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfVmsResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficInRankOfVmsResponseDataInner
     */
    'device': string;
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficInRankOfVmsResponseDataInner
     */
    'packets': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner>}
     * @memberof GetNetworkTrafficInRankOfVmsResponseDataInner
     */
    'history': Array<GetNetworkTrafficInRankOfHostsResponseDataInnerHistoryInner>;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficOutRankOfHostsResponse
 */
export interface GetNetworkTrafficOutRankOfHostsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficOutRankOfHostsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfHostsResponseDataInner>}
     * @memberof GetNetworkTrafficOutRankOfHostsResponse
     */
    'data': Array<GetNetworkTrafficInRankOfHostsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficOutRankOfHostsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficOutRankOfHostsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetNetworkTrafficOutRankOfVmsResponse
 */
export interface GetNetworkTrafficOutRankOfVmsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetNetworkTrafficOutRankOfVmsResponse
     */
    'code': number;
    /**
     * 
     * @type {Array<GetNetworkTrafficInRankOfVmsResponseDataInner>}
     * @memberof GetNetworkTrafficOutRankOfVmsResponse
     */
    'data': Array<GetNetworkTrafficInRankOfVmsResponseDataInner>;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficOutRankOfVmsResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetNetworkTrafficOutRankOfVmsResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetNodesResponse
 */
export interface GetNodesResponse {
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponse
     */
    'code': number;
    /**
     * 
     * @type {GetNodesResponseData}
     * @memberof GetNodesResponse
     */
    'data': GetNodesResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetNodesResponseData
 */
export interface GetNodesResponseData {
    /**
     * 
     * @type {Array<GetNodesResponseDataNodesInner>}
     * @memberof GetNodesResponseData
     */
    'nodes': Array<GetNodesResponseDataNodesInner>;
    /**
     * 
     * @type {GetEventsResponseDataPage}
     * @memberof GetNodesResponseData
     */
    'page': GetEventsResponseDataPage;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInner
 */
export interface GetNodesResponseDataNodesInner {
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'hostname': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'managementIP': string;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerLicense}
     * @memberof GetNodesResponseDataNodesInner
     */
    'license': GetNodesResponseDataNodesInnerLicense;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInner
     */
    'status': string;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerVcpu}
     * @memberof GetNodesResponseDataNodesInner
     */
    'vcpu': GetNodesResponseDataNodesInnerVcpu;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerMemory}
     * @memberof GetNodesResponseDataNodesInner
     */
    'memory': GetNodesResponseDataNodesInnerMemory;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerMemory}
     * @memberof GetNodesResponseDataNodesInner
     */
    'storage': GetNodesResponseDataNodesInnerMemory;
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInner
     */
    'uptimeSeconds': number;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerLabels}
     * @memberof GetNodesResponseDataNodesInner
     */
    'labels': GetNodesResponseDataNodesInnerLabels;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerLabels
 */
export interface GetNodesResponseDataNodesInnerLabels {
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLabels
     */
    'isGpuEnabled': string;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerLicense
 */
export interface GetNodesResponseDataNodesInnerLicense {
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'hostname': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'serial': string;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerLicenseProduct}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'product': GetNodesResponseDataNodesInnerLicenseProduct;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerIssue}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'issue': GetLicensesResponseDataLicensesInnerIssue;
    /**
     * 
     * @type {GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'serviceLevelAgreement': GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement;
    /**
     * 
     * @type {GetLicensesResponseDataLicensesInnerExpiry}
     * @memberof GetNodesResponseDataNodesInnerLicense
     */
    'expire': GetLicensesResponseDataLicensesInnerExpiry;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerLicenseProduct
 */
export interface GetNodesResponseDataNodesInnerLicenseProduct {
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicenseProduct
     */
    'name': string;
    /**
     * 
     * @type {GetMeResponseData}
     * @memberof GetNodesResponseDataNodesInnerLicenseProduct
     */
    'features': GetMeResponseData;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement
 */
export interface GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement {
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement
     */
    'uptime': number;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement
     */
    'period': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement
     */
    'meanTimeBetweenFailure': string;
    /**
     * 
     * @type {string}
     * @memberof GetNodesResponseDataNodesInnerLicenseServiceLevelAgreement
     */
    'meanTimeToRepair': string;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerMemory
 */
export interface GetNodesResponseDataNodesInnerMemory {
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerMemory
     */
    'totalMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerMemory
     */
    'usedMiB': number;
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerMemory
     */
    'freeMiB': number;
}
/**
 * 
 * @export
 * @interface GetNodesResponseDataNodesInnerVcpu
 */
export interface GetNodesResponseDataNodesInnerVcpu {
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerVcpu
     */
    'totalCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerVcpu
     */
    'usedCores': number;
    /**
     * 
     * @type {number}
     * @memberof GetNodesResponseDataNodesInnerVcpu
     */
    'freeCores': number;
}
/**
 * 
 * @export
 * @interface GetToken401Response
 */
export interface GetToken401Response {
    /**
     * 
     * @type {number}
     * @memberof GetToken401Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetToken401Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetToken401Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetToken500Response
 */
export interface GetToken500Response {
    /**
     * 
     * @type {number}
     * @memberof GetToken500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetToken500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetToken500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetTokensRequest
 */
export interface GetTokensRequest {
    /**
     * the name of user to generate the token
     * @type {string}
     * @memberof GetTokensRequest
     */
    'name': string;
    /**
     * the password of user to generate the token
     * @type {string}
     * @memberof GetTokensRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface GetTokensResponse
 */
export interface GetTokensResponse {
    /**
     * 
     * @type {number}
     * @memberof GetTokensResponse
     */
    'code': number;
    /**
     * 
     * @type {GetTokensResponseData}
     * @memberof GetTokensResponse
     */
    'data': GetTokensResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetTokensResponseData
 */
export interface GetTokensResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponseData
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponseData
     */
    'refresh': string;
    /**
     * 
     * @type {GetTokensResponseDataExpires}
     * @memberof GetTokensResponseData
     */
    'expires': GetTokensResponseDataExpires;
}
/**
 * 
 * @export
 * @interface GetTokensResponseDataExpires
 */
export interface GetTokensResponseDataExpires {
    /**
     * 
     * @type {number}
     * @memberof GetTokensResponseDataExpires
     */
    'access': number;
    /**
     * 
     * @type {number}
     * @memberof GetTokensResponseDataExpires
     */
    'refresh': number;
}
/**
 * 
 * @export
 * @interface ImportClusterLicense500Response
 */
export interface ImportClusterLicense500Response {
    /**
     * 
     * @type {number}
     * @memberof ImportClusterLicense500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImportClusterLicense500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportClusterLicense500Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface PatchModuleRepairResponse
 */
export interface PatchModuleRepairResponse {
    /**
     * 
     * @type {number}
     * @memberof PatchModuleRepairResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof PatchModuleRepairResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof PatchModuleRepairResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface PatchRepairResponse
 */
export interface PatchRepairResponse {
    /**
     * 
     * @type {number}
     * @memberof PatchRepairResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof PatchRepairResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof PatchRepairResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface PostLicenseResponse
 */
export interface PostLicenseResponse {
    /**
     * 
     * @type {number}
     * @memberof PostLicenseResponse
     */
    'code': number;
    /**
     * 
     * @type {object}
     * @memberof PostLicenseResponse
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof PostLicenseResponse
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof PostLicenseResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface RepairAllModulesHealth409Response
 */
export interface RepairAllModulesHealth409Response {
    /**
     * 
     * @type {number}
     * @memberof RepairAllModulesHealth409Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RepairAllModulesHealth409Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof RepairAllModulesHealth409Response
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface RepairAllModulesHealth500Response
 */
export interface RepairAllModulesHealth500Response {
    /**
     * 
     * @type {number}
     * @memberof RepairAllModulesHealth500Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RepairAllModulesHealth500Response
     */
    'msg'?: string;
    /**
     * 
     * @type {string}
     * @memberof RepairAllModulesHealth500Response
     */
    'status'?: string;
}

/**
 * DataCentersApi - axios parameter creator
 * @export
 */
export const DataCentersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the list of data centers
         * @summary Retrieve the list of data centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataCenters: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/datacenters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataCentersApi - functional programming interface
 * @export
 */
export const DataCentersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataCentersApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the list of data centers
         * @summary Retrieve the list of data centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataCenters(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDataCentersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataCenters(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataCentersApi.getDataCenters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataCentersApi - factory interface
 * @export
 */
export const DataCentersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataCentersApiFp(configuration)
    return {
        /**
         * Retrieve the list of data centers
         * @summary Retrieve the list of data centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataCenters(options?: RawAxiosRequestConfig): AxiosPromise<GetDataCentersResponse> {
            return localVarFp.getDataCenters(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataCentersApi - object-oriented interface
 * @export
 * @class DataCentersApi
 * @extends {BaseAPI}
 */
export class DataCentersApi extends BaseAPI {
    /**
     * Retrieve the list of data centers
     * @summary Retrieve the list of data centers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCentersApi
     */
    public getDataCenters(options?: RawAxiosRequestConfig) {
        return DataCentersApiFp(this.configuration).getDataCenters(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the abstracted events
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetAbstractedEventsTypeEnum} type The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
         * @param {number} [limit] The limit of the abstracted events to return (default is 10).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbstractedEvents: async (dataCenter: string, type: GetAbstractedEventsTypeEnum, limit?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getAbstractedEvents', 'dataCenter', dataCenter)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getAbstractedEvents', 'type', type)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/events/abstract`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the list of events
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetEventsTypeEnum} type The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
         * @param {string} [start] The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the event to query, the value should be in RFC3339 format (default is now).
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (dataCenter: string, type: GetEventsTypeEnum, start?: string, stop?: string, pageNum?: number, pageSize?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getEvents', 'dataCenter', dataCenter)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getEvents', 'type', type)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/events`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = stop;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the abstracted events
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetAbstractedEventsTypeEnum} type The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
         * @param {number} [limit] The limit of the abstracted events to return (default is 10).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbstractedEvents(dataCenter: string, type: GetAbstractedEventsTypeEnum, limit?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAbstractedEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbstractedEvents(dataCenter, type, limit, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.getAbstractedEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the list of events
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetEventsTypeEnum} type The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
         * @param {string} [start] The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the event to query, the value should be in RFC3339 format (default is now).
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(dataCenter: string, type: GetEventsTypeEnum, start?: string, stop?: string, pageNum?: number, pageSize?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(dataCenter, type, start, stop, pageNum, pageSize, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.getEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the abstracted events
         * @param {EventsApiGetAbstractedEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbstractedEvents(requestParameters: EventsApiGetAbstractedEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetAbstractedEventsResponse> {
            return localVarFp.getAbstractedEvents(requestParameters.dataCenter, requestParameters.type, requestParameters.limit, requestParameters.watch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the list of events
         * @param {EventsApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(requestParameters: EventsApiGetEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetEventsResponse> {
            return localVarFp.getEvents(requestParameters.dataCenter, requestParameters.type, requestParameters.start, requestParameters.stop, requestParameters.pageNum, requestParameters.pageSize, requestParameters.watch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAbstractedEvents operation in EventsApi.
 * @export
 * @interface EventsApiGetAbstractedEventsRequest
 */
export interface EventsApiGetAbstractedEventsRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof EventsApiGetAbstractedEvents
     */
    readonly dataCenter: string

    /**
     * The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
     * @type {'start' | 'host' | 'instance'}
     * @memberof EventsApiGetAbstractedEvents
     */
    readonly type: GetAbstractedEventsTypeEnum

    /**
     * The limit of the abstracted events to return (default is 10).
     * @type {number}
     * @memberof EventsApiGetAbstractedEvents
     */
    readonly limit?: number

    /**
     * The toggle to enable http chunked transfer for continues server push.
     * @type {boolean}
     * @memberof EventsApiGetAbstractedEvents
     */
    readonly watch?: boolean
}

/**
 * Request parameters for getEvents operation in EventsApi.
 * @export
 * @interface EventsApiGetEventsRequest
 */
export interface EventsApiGetEventsRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof EventsApiGetEvents
     */
    readonly dataCenter: string

    /**
     * The type of event to query, the value can be only \&#39;system\&#39;, \&#39;host\&#39;, and \&#39;instance\&#39;.
     * @type {'system' | 'host' | 'instance'}
     * @memberof EventsApiGetEvents
     */
    readonly type: GetEventsTypeEnum

    /**
     * The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
     * @type {string}
     * @memberof EventsApiGetEvents
     */
    readonly start?: string

    /**
     * The end time of the event to query, the value should be in RFC3339 format (default is now).
     * @type {string}
     * @memberof EventsApiGetEvents
     */
    readonly stop?: string

    /**
     * The page number of the event chunking to fetch (default is 1).
     * @type {number}
     * @memberof EventsApiGetEvents
     */
    readonly pageNum?: number

    /**
     * The size per page of the events to return (default is unlimit).
     * @type {number}
     * @memberof EventsApiGetEvents
     */
    readonly pageSize?: number

    /**
     * The toggle to enable http chunked transfer for continues server push.
     * @type {boolean}
     * @memberof EventsApiGetEvents
     */
    readonly watch?: boolean
}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the abstracted events
     * @param {EventsApiGetAbstractedEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getAbstractedEvents(requestParameters: EventsApiGetAbstractedEventsRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).getAbstractedEvents(requestParameters.dataCenter, requestParameters.type, requestParameters.limit, requestParameters.watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the list of events
     * @param {EventsApiGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvents(requestParameters: EventsApiGetEventsRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvents(requestParameters.dataCenter, requestParameters.type, requestParameters.start, requestParameters.stop, requestParameters.pageNum, requestParameters.pageSize, requestParameters.watch, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAbstractedEventsTypeEnum = {
    Start: 'start',
    Host: 'host',
    Instance: 'instance'
} as const;
export type GetAbstractedEventsTypeEnum = typeof GetAbstractedEventsTypeEnum[keyof typeof GetAbstractedEventsTypeEnum];
/**
 * @export
 */
export const GetEventsTypeEnum = {
    System: 'system',
    Host: 'host',
    Instance: 'instance'
} as const;
export type GetEventsTypeEnum = typeof GetEventsTypeEnum[keyof typeof GetEventsTypeEnum];


/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the health history of module
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} module The name of the module to retrieve health history, it could be \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
         * @param {string} [start] The start time of the health history to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the health history to query, the value should be in RFC3339 format (default is now).
         * @param {number} [pageNum] The page number of the health history chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the health history to return (default is unlimit).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealthHistory: async (dataCenter: string, module: string, start?: string, stop?: string, pageNum?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getHealthHistory', 'dataCenter', dataCenter)
            // verify required parameter 'module' is not null or undefined
            assertParamExists('getHealthHistory', 'module', module)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/healths/{module}/history`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)))
                .replace(`{${"module"}}`, encodeURIComponent(String(module)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = stop;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the overall health status of all modules
         * @param {string} dataCenter The name of the data center to operate
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealths: async (dataCenter: string, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getHealths', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/healths`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Repair the health for all modules
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repairAllModulesHealth: async (dataCenter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('repairAllModulesHealth', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/healths`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Repair the unhealthy module
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} module The name of the module to repair. The module name is like \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repairModuleHealth: async (dataCenter: string, module: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('repairModuleHealth', 'dataCenter', dataCenter)
            // verify required parameter 'module' is not null or undefined
            assertParamExists('repairModuleHealth', 'module', module)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/healths/{module}`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)))
                .replace(`{${"module"}}`, encodeURIComponent(String(module)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the health history of module
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} module The name of the module to retrieve health history, it could be \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
         * @param {string} [start] The start time of the health history to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the health history to query, the value should be in RFC3339 format (default is now).
         * @param {number} [pageNum] The page number of the health history chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the health history to return (default is unlimit).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealthHistory(dataCenter: string, module: string, start?: string, stop?: string, pageNum?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetModuleHealthHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealthHistory(dataCenter, module, start, stop, pageNum, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.getHealthHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the overall health status of all modules
         * @param {string} dataCenter The name of the data center to operate
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealths(dataCenter: string, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHealthsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealths(dataCenter, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.getHealths']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Repair the health for all modules
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repairAllModulesHealth(dataCenter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchRepairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repairAllModulesHealth(dataCenter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.repairAllModulesHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Repair the unhealthy module
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} module The name of the module to repair. The module name is like \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repairModuleHealth(dataCenter: string, module: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchModuleRepairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repairModuleHealth(dataCenter, module, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.repairModuleHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the health history of module
         * @param {HealthApiGetHealthHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealthHistory(requestParameters: HealthApiGetHealthHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetModuleHealthHistoryResponse> {
            return localVarFp.getHealthHistory(requestParameters.dataCenter, requestParameters.module, requestParameters.start, requestParameters.stop, requestParameters.pageNum, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the overall health status of all modules
         * @param {HealthApiGetHealthsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealths(requestParameters: HealthApiGetHealthsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetHealthsResponse> {
            return localVarFp.getHealths(requestParameters.dataCenter, requestParameters.watch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Repair the health for all modules
         * @param {HealthApiRepairAllModulesHealthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repairAllModulesHealth(requestParameters: HealthApiRepairAllModulesHealthRequest, options?: RawAxiosRequestConfig): AxiosPromise<PatchRepairResponse> {
            return localVarFp.repairAllModulesHealth(requestParameters.dataCenter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Repair the unhealthy module
         * @param {HealthApiRepairModuleHealthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repairModuleHealth(requestParameters: HealthApiRepairModuleHealthRequest, options?: RawAxiosRequestConfig): AxiosPromise<PatchModuleRepairResponse> {
            return localVarFp.repairModuleHealth(requestParameters.dataCenter, requestParameters.module, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHealthHistory operation in HealthApi.
 * @export
 * @interface HealthApiGetHealthHistoryRequest
 */
export interface HealthApiGetHealthHistoryRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof HealthApiGetHealthHistory
     */
    readonly dataCenter: string

    /**
     * The name of the module to retrieve health history, it could be \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
     * @type {string}
     * @memberof HealthApiGetHealthHistory
     */
    readonly module: string

    /**
     * The start time of the health history to query, the value should be in RFC3339 format (default is 24 hours ago).
     * @type {string}
     * @memberof HealthApiGetHealthHistory
     */
    readonly start?: string

    /**
     * The end time of the health history to query, the value should be in RFC3339 format (default is now).
     * @type {string}
     * @memberof HealthApiGetHealthHistory
     */
    readonly stop?: string

    /**
     * The page number of the health history chunking to fetch (default is 1).
     * @type {number}
     * @memberof HealthApiGetHealthHistory
     */
    readonly pageNum?: number

    /**
     * The size per page of the health history to return (default is unlimit).
     * @type {number}
     * @memberof HealthApiGetHealthHistory
     */
    readonly pageSize?: number
}

/**
 * Request parameters for getHealths operation in HealthApi.
 * @export
 * @interface HealthApiGetHealthsRequest
 */
export interface HealthApiGetHealthsRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof HealthApiGetHealths
     */
    readonly dataCenter: string

    /**
     * The toggle to enable http chunked transfer for continues server push.
     * @type {boolean}
     * @memberof HealthApiGetHealths
     */
    readonly watch?: boolean
}

/**
 * Request parameters for repairAllModulesHealth operation in HealthApi.
 * @export
 * @interface HealthApiRepairAllModulesHealthRequest
 */
export interface HealthApiRepairAllModulesHealthRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof HealthApiRepairAllModulesHealth
     */
    readonly dataCenter: string
}

/**
 * Request parameters for repairModuleHealth operation in HealthApi.
 * @export
 * @interface HealthApiRepairModuleHealthRequest
 */
export interface HealthApiRepairModuleHealthRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof HealthApiRepairModuleHealth
     */
    readonly dataCenter: string

    /**
     * The name of the module to repair. The module name is like \&#39;ceph_osd\&#39;, \&#39;nova\&#39;, and so on.
     * @type {string}
     * @memberof HealthApiRepairModuleHealth
     */
    readonly module: string
}

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the health history of module
     * @param {HealthApiGetHealthHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public getHealthHistory(requestParameters: HealthApiGetHealthHistoryRequest, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).getHealthHistory(requestParameters.dataCenter, requestParameters.module, requestParameters.start, requestParameters.stop, requestParameters.pageNum, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the overall health status of all modules
     * @param {HealthApiGetHealthsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public getHealths(requestParameters: HealthApiGetHealthsRequest, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).getHealths(requestParameters.dataCenter, requestParameters.watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Repair the health for all modules
     * @param {HealthApiRepairAllModulesHealthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public repairAllModulesHealth(requestParameters: HealthApiRepairAllModulesHealthRequest, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).repairAllModulesHealth(requestParameters.dataCenter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Repair the unhealthy module
     * @param {HealthApiRepairModuleHealthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public repairModuleHealth(requestParameters: HealthApiRepairModuleHealthRequest, options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).repairModuleHealth(requestParameters.dataCenter, requestParameters.module, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IntegrationsApi - axios parameter creator
 * @export
 */
export const IntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the list of integrated applications
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrations: async (dataCenter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getIntegrations', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/integrations`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export const IntegrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of integrated applications
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrations(dataCenter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrations(dataCenter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.getIntegrations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IntegrationsApi - factory interface
 * @export
 */
export const IntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of integrated applications
         * @param {IntegrationsApiGetIntegrationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrations(requestParameters: IntegrationsApiGetIntegrationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetIntegrationsResponse> {
            return localVarFp.getIntegrations(requestParameters.dataCenter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIntegrations operation in IntegrationsApi.
 * @export
 * @interface IntegrationsApiGetIntegrationsRequest
 */
export interface IntegrationsApiGetIntegrationsRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof IntegrationsApiGetIntegrations
     */
    readonly dataCenter: string
}

/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
export class IntegrationsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the list of integrated applications
     * @param {IntegrationsApiGetIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public getIntegrations(requestParameters: IntegrationsApiGetIntegrationsRequest, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).getIntegrations(requestParameters.dataCenter, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LicensesApi - axios parameter creator
 * @export
 */
export const LicensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the list of licenses
         * @param {string} dataCenter The name of the data center to operate
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses: async (dataCenter: string, pageNum?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getLicenses', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/licenses`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update licenses for the cluster
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} node The name of the node to operate
         * @param {File} license License file (must have a .license extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importClusterLicense: async (dataCenter: string, node: string, license: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('importClusterLicense', 'dataCenter', dataCenter)
            // verify required parameter 'node' is not null or undefined
            assertParamExists('importClusterLicense', 'node', node)
            // verify required parameter 'license' is not null or undefined
            assertParamExists('importClusterLicense', 'license', license)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/licenses`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)))
                .replace(`{${"node"}}`, encodeURIComponent(String(node)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (license !== undefined) { 
                localVarFormParams.append('license', license as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update licenses for specific node
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} node The name of the node to operate
         * @param {File} license License file (must have a .license extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNodeLicense: async (dataCenter: string, node: string, license: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('importNodeLicense', 'dataCenter', dataCenter)
            // verify required parameter 'node' is not null or undefined
            assertParamExists('importNodeLicense', 'node', node)
            // verify required parameter 'license' is not null or undefined
            assertParamExists('importNodeLicense', 'license', license)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/nodes/{node}/licenses`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)))
                .replace(`{${"node"}}`, encodeURIComponent(String(node)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (license !== undefined) { 
                localVarFormParams.append('license', license as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicensesApi - functional programming interface
 * @export
 */
export const LicensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LicensesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of licenses
         * @param {string} dataCenter The name of the data center to operate
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenses(dataCenter: string, pageNum?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLicensesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicenses(dataCenter, pageNum, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LicensesApi.getLicenses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update licenses for the cluster
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} node The name of the node to operate
         * @param {File} license License file (must have a .license extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importClusterLicense(dataCenter: string, node: string, license: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importClusterLicense(dataCenter, node, license, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LicensesApi.importClusterLicense']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update licenses for specific node
         * @param {string} dataCenter The name of the data center to operate
         * @param {string} node The name of the node to operate
         * @param {File} license License file (must have a .license extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importNodeLicense(dataCenter: string, node: string, license: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importNodeLicense(dataCenter, node, license, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LicensesApi.importNodeLicense']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LicensesApi - factory interface
 * @export
 */
export const LicensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LicensesApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of licenses
         * @param {LicensesApiGetLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(requestParameters: LicensesApiGetLicensesRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetLicensesResponse> {
            return localVarFp.getLicenses(requestParameters.dataCenter, requestParameters.pageNum, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update licenses for the cluster
         * @param {LicensesApiImportClusterLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importClusterLicense(requestParameters: LicensesApiImportClusterLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostLicenseResponse> {
            return localVarFp.importClusterLicense(requestParameters.dataCenter, requestParameters.node, requestParameters.license, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update licenses for specific node
         * @param {LicensesApiImportNodeLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNodeLicense(requestParameters: LicensesApiImportNodeLicenseRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostLicenseResponse> {
            return localVarFp.importNodeLicense(requestParameters.dataCenter, requestParameters.node, requestParameters.license, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLicenses operation in LicensesApi.
 * @export
 * @interface LicensesApiGetLicensesRequest
 */
export interface LicensesApiGetLicensesRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof LicensesApiGetLicenses
     */
    readonly dataCenter: string

    /**
     * The page number of the event chunking to fetch (default is 1).
     * @type {number}
     * @memberof LicensesApiGetLicenses
     */
    readonly pageNum?: number

    /**
     * The size per page of the events to return (default is unlimit).
     * @type {number}
     * @memberof LicensesApiGetLicenses
     */
    readonly pageSize?: number
}

/**
 * Request parameters for importClusterLicense operation in LicensesApi.
 * @export
 * @interface LicensesApiImportClusterLicenseRequest
 */
export interface LicensesApiImportClusterLicenseRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof LicensesApiImportClusterLicense
     */
    readonly dataCenter: string

    /**
     * The name of the node to operate
     * @type {string}
     * @memberof LicensesApiImportClusterLicense
     */
    readonly node: string

    /**
     * License file (must have a .license extension)
     * @type {File}
     * @memberof LicensesApiImportClusterLicense
     */
    readonly license: File
}

/**
 * Request parameters for importNodeLicense operation in LicensesApi.
 * @export
 * @interface LicensesApiImportNodeLicenseRequest
 */
export interface LicensesApiImportNodeLicenseRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof LicensesApiImportNodeLicense
     */
    readonly dataCenter: string

    /**
     * The name of the node to operate
     * @type {string}
     * @memberof LicensesApiImportNodeLicense
     */
    readonly node: string

    /**
     * License file (must have a .license extension)
     * @type {File}
     * @memberof LicensesApiImportNodeLicense
     */
    readonly license: File
}

/**
 * LicensesApi - object-oriented interface
 * @export
 * @class LicensesApi
 * @extends {BaseAPI}
 */
export class LicensesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the list of licenses
     * @param {LicensesApiGetLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public getLicenses(requestParameters: LicensesApiGetLicensesRequest, options?: RawAxiosRequestConfig) {
        return LicensesApiFp(this.configuration).getLicenses(requestParameters.dataCenter, requestParameters.pageNum, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update licenses for the cluster
     * @param {LicensesApiImportClusterLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public importClusterLicense(requestParameters: LicensesApiImportClusterLicenseRequest, options?: RawAxiosRequestConfig) {
        return LicensesApiFp(this.configuration).importClusterLicense(requestParameters.dataCenter, requestParameters.node, requestParameters.license, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update licenses for specific node
     * @param {LicensesApiImportNodeLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensesApi
     */
    public importNodeLicense(requestParameters: LicensesApiImportNodeLicenseRequest, options?: RawAxiosRequestConfig) {
        return LicensesApiFp(this.configuration).importNodeLicense(requestParameters.dataCenter, requestParameters.node, requestParameters.license, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogoutApi - axios parameter creator
 * @export
 */
export const LogoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Logout from the system and redirect to login page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogoutApi - functional programming interface
 * @export
 */
export const LogoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Logout from the system and redirect to login page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogoutApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogoutApi - factory interface
 * @export
 */
export const LogoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogoutApiFp(configuration)
    return {
        /**
         * 
         * @summary Logout from the system and redirect to login page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogoutApi - object-oriented interface
 * @export
 * @class LogoutApi
 * @extends {BaseAPI}
 */
export class LogoutApi extends BaseAPI {
    /**
     * 
     * @summary Logout from the system and redirect to login page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoutApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return LogoutApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the various metrics with different view from hosts or vms
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetMetricByTypesMetricTypeEnum} metricType The type of metric to query, the value can be \&#39;cpuUsage\&#39;, \&#39;memoryUsage\&#39;, \&#39;diskUsage\&#39;, \&#39;diskBandwidth\&#39;, \&#39;diskIops\&#39;, \&#39;diskLatency\&#39;, \&#39;diskReadIops\&#39;, \&#39;diskWriteIops\&#39;, \&#39;networkTrafficIn\&#39;, or \&#39;networkTrafficOut\&#39;.
         * @param {GetMetricByTypesViewTypeEnum} viewType The type of view to query, the value can be only \&#39;summary\&#39;, \&#39;history\&#39;, or \&#39;rank\&#39;.
         * @param {GetMetricByTypesEntityTypeEnum} entityType The type of entity to query, the value can be \&#39;hosts\&#39; or \&#39;vms\&#39;
         * @param {string} [start] The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the event to query, the value should be in RFC3339 format (default is now).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricByTypes: async (dataCenter: string, metricType: GetMetricByTypesMetricTypeEnum, viewType: GetMetricByTypesViewTypeEnum, entityType: GetMetricByTypesEntityTypeEnum, start?: string, stop?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getMetricByTypes', 'dataCenter', dataCenter)
            // verify required parameter 'metricType' is not null or undefined
            assertParamExists('getMetricByTypes', 'metricType', metricType)
            // verify required parameter 'viewType' is not null or undefined
            assertParamExists('getMetricByTypes', 'viewType', viewType)
            // verify required parameter 'entityType' is not null or undefined
            assertParamExists('getMetricByTypes', 'entityType', entityType)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/metrics/{metricType}/{viewType}/{entityType}`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)))
                .replace(`{${"metricType"}}`, encodeURIComponent(String(metricType)))
                .replace(`{${"viewType"}}`, encodeURIComponent(String(viewType)))
                .replace(`{${"entityType"}}`, encodeURIComponent(String(entityType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = stop;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the metrics of data center
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsOverview: async (dataCenter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getMetricsOverview', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/metrics`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the various metrics with different view from hosts or vms
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetMetricByTypesMetricTypeEnum} metricType The type of metric to query, the value can be \&#39;cpuUsage\&#39;, \&#39;memoryUsage\&#39;, \&#39;diskUsage\&#39;, \&#39;diskBandwidth\&#39;, \&#39;diskIops\&#39;, \&#39;diskLatency\&#39;, \&#39;diskReadIops\&#39;, \&#39;diskWriteIops\&#39;, \&#39;networkTrafficIn\&#39;, or \&#39;networkTrafficOut\&#39;.
         * @param {GetMetricByTypesViewTypeEnum} viewType The type of view to query, the value can be only \&#39;summary\&#39;, \&#39;history\&#39;, or \&#39;rank\&#39;.
         * @param {GetMetricByTypesEntityTypeEnum} entityType The type of entity to query, the value can be \&#39;hosts\&#39; or \&#39;vms\&#39;
         * @param {string} [start] The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
         * @param {string} [stop] The end time of the event to query, the value should be in RFC3339 format (default is now).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricByTypes(dataCenter: string, metricType: GetMetricByTypesMetricTypeEnum, viewType: GetMetricByTypesViewTypeEnum, entityType: GetMetricByTypesEntityTypeEnum, start?: string, stop?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetricByTypes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricByTypes(dataCenter, metricType, viewType, entityType, start, stop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.getMetricByTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the metrics of data center
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricsOverview(dataCenter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsOverview(dataCenter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.getMetricsOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the various metrics with different view from hosts or vms
         * @param {MetricsApiGetMetricByTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricByTypes(requestParameters: MetricsApiGetMetricByTypesRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMetricByTypes200Response> {
            return localVarFp.getMetricByTypes(requestParameters.dataCenter, requestParameters.metricType, requestParameters.viewType, requestParameters.entityType, requestParameters.start, requestParameters.stop, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the metrics of data center
         * @param {MetricsApiGetMetricsOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsOverview(requestParameters: MetricsApiGetMetricsOverviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMetricsResponse> {
            return localVarFp.getMetricsOverview(requestParameters.dataCenter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMetricByTypes operation in MetricsApi.
 * @export
 * @interface MetricsApiGetMetricByTypesRequest
 */
export interface MetricsApiGetMetricByTypesRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly dataCenter: string

    /**
     * The type of metric to query, the value can be \&#39;cpuUsage\&#39;, \&#39;memoryUsage\&#39;, \&#39;diskUsage\&#39;, \&#39;diskBandwidth\&#39;, \&#39;diskIops\&#39;, \&#39;diskLatency\&#39;, \&#39;diskReadIops\&#39;, \&#39;diskWriteIops\&#39;, \&#39;networkTrafficIn\&#39;, or \&#39;networkTrafficOut\&#39;.
     * @type {'cpuUsage' | 'memoryUsage' | 'diskUsage' | 'diskBandwidth' | 'diskIops' | 'diskLatency' | 'diskReadIops' | 'diskWriteIops' | 'networkTrafficIn' | 'networkTrafficOut'}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly metricType: GetMetricByTypesMetricTypeEnum

    /**
     * The type of view to query, the value can be only \&#39;summary\&#39;, \&#39;history\&#39;, or \&#39;rank\&#39;.
     * @type {'summary' | 'history' | 'rank'}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly viewType: GetMetricByTypesViewTypeEnum

    /**
     * The type of entity to query, the value can be \&#39;hosts\&#39; or \&#39;vms\&#39;
     * @type {'hosts' | 'vms'}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly entityType: GetMetricByTypesEntityTypeEnum

    /**
     * The start time of the event to query, the value should be in RFC3339 format (default is 24 hours ago).
     * @type {string}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly start?: string

    /**
     * The end time of the event to query, the value should be in RFC3339 format (default is now).
     * @type {string}
     * @memberof MetricsApiGetMetricByTypes
     */
    readonly stop?: string
}

/**
 * Request parameters for getMetricsOverview operation in MetricsApi.
 * @export
 * @interface MetricsApiGetMetricsOverviewRequest
 */
export interface MetricsApiGetMetricsOverviewRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof MetricsApiGetMetricsOverview
     */
    readonly dataCenter: string
}

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the various metrics with different view from hosts or vms
     * @param {MetricsApiGetMetricByTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getMetricByTypes(requestParameters: MetricsApiGetMetricByTypesRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getMetricByTypes(requestParameters.dataCenter, requestParameters.metricType, requestParameters.viewType, requestParameters.entityType, requestParameters.start, requestParameters.stop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the metrics of data center
     * @param {MetricsApiGetMetricsOverviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getMetricsOverview(requestParameters: MetricsApiGetMetricsOverviewRequest, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getMetricsOverview(requestParameters.dataCenter, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetMetricByTypesMetricTypeEnum = {
    CpuUsage: 'cpuUsage',
    MemoryUsage: 'memoryUsage',
    DiskUsage: 'diskUsage',
    DiskBandwidth: 'diskBandwidth',
    DiskIops: 'diskIops',
    DiskLatency: 'diskLatency',
    DiskReadIops: 'diskReadIops',
    DiskWriteIops: 'diskWriteIops',
    NetworkTrafficIn: 'networkTrafficIn',
    NetworkTrafficOut: 'networkTrafficOut'
} as const;
export type GetMetricByTypesMetricTypeEnum = typeof GetMetricByTypesMetricTypeEnum[keyof typeof GetMetricByTypesMetricTypeEnum];
/**
 * @export
 */
export const GetMetricByTypesViewTypeEnum = {
    Summary: 'summary',
    History: 'history',
    Rank: 'rank'
} as const;
export type GetMetricByTypesViewTypeEnum = typeof GetMetricByTypesViewTypeEnum[keyof typeof GetMetricByTypesViewTypeEnum];
/**
 * @export
 */
export const GetMetricByTypesEntityTypeEnum = {
    Hosts: 'hosts',
    Vms: 'vms'
} as const;
export type GetMetricByTypesEntityTypeEnum = typeof GetMetricByTypesEntityTypeEnum[keyof typeof GetMetricByTypesEntityTypeEnum];


/**
 * NodesApi - axios parameter creator
 * @export
 */
export const NodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the list of nodes
         * @param {string} dataCenter The name of the data center to operate
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes: async (dataCenter: string, pageNum?: number, pageSize?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getNodes', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/nodes`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodesApi - functional programming interface
 * @export
 */
export const NodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of nodes
         * @param {string} dataCenter The name of the data center to operate
         * @param {number} [pageNum] The page number of the event chunking to fetch (default is 1).
         * @param {number} [pageSize] The size per page of the events to return (default is unlimit).
         * @param {boolean} [watch] The toggle to enable http chunked transfer for continues server push.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodes(dataCenter: string, pageNum?: number, pageSize?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodes(dataCenter, pageNum, pageSize, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.getNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodesApi - factory interface
 * @export
 */
export const NodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodesApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the list of nodes
         * @param {NodesApiGetNodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes(requestParameters: NodesApiGetNodesRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetNodesResponse> {
            return localVarFp.getNodes(requestParameters.dataCenter, requestParameters.pageNum, requestParameters.pageSize, requestParameters.watch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getNodes operation in NodesApi.
 * @export
 * @interface NodesApiGetNodesRequest
 */
export interface NodesApiGetNodesRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof NodesApiGetNodes
     */
    readonly dataCenter: string

    /**
     * The page number of the event chunking to fetch (default is 1).
     * @type {number}
     * @memberof NodesApiGetNodes
     */
    readonly pageNum?: number

    /**
     * The size per page of the events to return (default is unlimit).
     * @type {number}
     * @memberof NodesApiGetNodes
     */
    readonly pageSize?: number

    /**
     * The toggle to enable http chunked transfer for continues server push.
     * @type {boolean}
     * @memberof NodesApiGetNodes
     */
    readonly watch?: boolean
}

/**
 * NodesApi - object-oriented interface
 * @export
 * @class NodesApi
 * @extends {BaseAPI}
 */
export class NodesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the list of nodes
     * @param {NodesApiGetNodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public getNodes(requestParameters: NodesApiGetNodesRequest, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).getNodes(requestParameters.dataCenter, requestParameters.pageNum, requestParameters.pageSize, requestParameters.watch, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the time-limited token for the data center
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetTokensRequest} getTokensRequest The user name and password to generate the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (dataCenter: string, getTokensRequest: GetTokensRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getToken', 'dataCenter', dataCenter)
            // verify required parameter 'getTokensRequest' is not null or undefined
            assertParamExists('getToken', 'getTokensRequest', getTokensRequest)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/tokens`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTokensRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokensApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the time-limited token for the data center
         * @param {string} dataCenter The name of the data center to operate
         * @param {GetTokensRequest} getTokensRequest The user name and password to generate the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(dataCenter: string, getTokensRequest: GetTokensRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTokensResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(dataCenter, getTokensRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TokensApi.getToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokensApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the time-limited token for the data center
         * @param {TokensApiGetTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(requestParameters: TokensApiGetTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetTokensResponse> {
            return localVarFp.getToken(requestParameters.dataCenter, requestParameters.getTokensRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getToken operation in TokensApi.
 * @export
 * @interface TokensApiGetTokenRequest
 */
export interface TokensApiGetTokenRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof TokensApiGetToken
     */
    readonly dataCenter: string

    /**
     * The user name and password to generate the token
     * @type {GetTokensRequest}
     * @memberof TokensApiGetToken
     */
    readonly getTokensRequest: GetTokensRequest
}

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the time-limited token for the data center
     * @param {TokensApiGetTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public getToken(requestParameters: TokensApiGetTokenRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).getToken(requestParameters.dataCenter, requestParameters.getTokensRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export const UserInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the own user info
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (dataCenter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataCenter' is not null or undefined
            assertParamExists('getMe', 'dataCenter', dataCenter)
            const localVarPath = `/api/v1/datacenters/{dataCenter}/me`
                .replace(`{${"dataCenter"}}`, encodeURIComponent(String(dataCenter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserInfoApi - functional programming interface
 * @export
 */
export const UserInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the own user info
         * @param {string} dataCenter The name of the data center to operate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(dataCenter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(dataCenter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserInfoApi.getMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserInfoApi - factory interface
 * @export
 */
export const UserInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the own user info
         * @param {UserInfoApiGetMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(requestParameters: UserInfoApiGetMeRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMeResponse> {
            return localVarFp.getMe(requestParameters.dataCenter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMe operation in UserInfoApi.
 * @export
 * @interface UserInfoApiGetMeRequest
 */
export interface UserInfoApiGetMeRequest {
    /**
     * The name of the data center to operate
     * @type {string}
     * @memberof UserInfoApiGetMe
     */
    readonly dataCenter: string
}

/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export class UserInfoApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the own user info
     * @param {UserInfoApiGetMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInfoApi
     */
    public getMe(requestParameters: UserInfoApiGetMeRequest, options?: RawAxiosRequestConfig) {
        return UserInfoApiFp(this.configuration).getMe(requestParameters.dataCenter, options).then((request) => request(this.axios, this.basePath));
    }
}



